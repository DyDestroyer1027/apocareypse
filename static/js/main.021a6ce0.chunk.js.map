{"version":3,"sources":["App.js","index.js"],"names":["now","Date","year","getFullYear","Timer","props","className","days","hours","minutes","seconds","Card","name","ReactHtmlParser","description","getDate","getMonth","countdownRenderer","completed","date","renderer","durationRenderer","App","snowflakeCount","style","position","url","bgColor","height","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAMMA,EAAM,IAAIC,KACZC,EAAOF,EAAIG,cAKf,SAASC,EAAMC,GAYb,OAVE,iCACE,uBAAMC,UAAU,iBAAhB,UACE,sBAAMA,UAAU,OAAhB,SAAwBD,EAAME,OADhC,aAEA,uBAAMD,UAAU,kBAAhB,UACE,sBAAMA,UAAU,QAAhB,SAAyBD,EAAMG,QADjC,cAEA,uBAAMF,UAAU,oBAAhB,UACE,sBAAMA,UAAU,UAAhB,SAA2BD,EAAMI,UADnC,UAC4E,IAAlBJ,EAAMI,QAAgB,GAAI,IADpF,QAEA,uBAAMH,UAAU,oBAAhB,UACE,sBAAMA,UAAU,UAAhB,SAA2BD,EAAMK,UADnC,kBAMN,SAASC,EAAKN,GAQZ,OANA,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,6BAAI,4BAAID,EAAMO,SACd,4BAAKC,IAAgBR,EAAMS,oBAxB9Bd,EAAIe,UAAY,IAAyB,KAAnBf,EAAIgB,aAAmBd,GAAQ,GA8BxD,IAAMe,EAAoB,SAAC,GAAkD,IAAhDV,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QACjD,OAD0E,EAAhBQ,UAGjD,cAAC,IAAD,CAAWC,KAAM,IAAIlB,KAAKC,EAAM,GAAI,IAAKkB,SAAUC,IAGnD,uBAAMf,UAAU,iBAAhB,UAAiC,qCAAQJ,EAAR,8BAAyC,uBAA1E,IAAgF,cAACE,EAAD,CAAOG,KAAMA,EAAMC,MAAOA,EAAOC,QAASA,EAASC,QAASA,IAA5I,QAGLW,EAAmB,SAAC,GAAkD,IAAhDd,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QAChD,OADyE,EAAhBQ,UAGhD,cAAC,IAAD,CAAWC,KAAM,IAAIlB,KAAKC,EAAM,GAAI,GAAIkB,SAAUH,IAGlD,uBAAMX,UAAU,iBAAhB,UAAiC,4DAAkC,uBAAnE,yBAA8F,uBAAK,cAACF,EAAD,CAAOG,KAAMA,EAAMC,MAAOA,EAAOC,QAASA,EAASC,QAASA,QAgC3JY,MA7Bf,WACE,OACE,sBAAKhB,UAAU,MAAf,UACE,cAAC,IAAD,CAAUiB,eAAgB,IAAKC,MAAO,CAACC,SAAU,cACjD,qBAAKnB,UAAU,yBAAf,SACE,cAAC,aAAD,CAAYoB,IAAI,iDAAiDC,QAAQ,UAAUH,MAAO,CAAEI,OAAQ,OAAQC,MAAO,QAAUvB,UAAU,yBAEvI,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,2BAAf,SACE,cAAC,IAAD,CAAWa,KAAM,IAAIlB,KAAKC,EAAM,GAAI,GAAIkB,SAAUH,UAI1D,qBAAKX,UAAU,wBAAf,SACI,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,QAAf,UACE,cAACK,EAAD,CAAMC,KAAK,YAAYE,YAAY,oLACnC,cAACH,EAAD,CAAMC,KAAK,WAAWE,YAAY,6EAClC,cAACH,EAAD,CAAMC,KAAK,SAASE,YAAY,iGAChC,cAACH,EAAD,CAAMC,KAAK,SAASE,YAAY,uIAChC,cAACH,EAAD,CAAMC,KAAK,SAASE,YAAY,gFAChC,cAACH,EAAD,CAAMC,KAAK,yBAAyBE,YAAY,sKC1E9DgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.021a6ce0.chunk.js","sourcesContent":["import './App.css';\nimport Countdown from 'react-countdown';\nimport React from 'react'\nimport Snowfall from 'react-snowfall'\nimport ReactHtmlParser from 'react-html-parser'\nimport { SocialIcon } from 'react-social-icons';\nconst now = new Date()\nvar year = now.getFullYear()\nif(now.getDate() > 24 && now.getMonth() === 11) year += 1\n// For stupid date reasons, i have to do this. \n//I'm assuming the year for duration and countdown purposes is the current one unless the event has ended, but it hasn't been new years yet (december 25th-december 31st)\n// Timer text component\nfunction Timer(props) {\n  let text = \n    <span> \n      <span className='days-container'>\n        <span className='days'>{props.days}</span> Days, </span>\n      <span className='hours-container'>\n        <span className='hours'>{props.hours}</span> Hours, </span>\n      <span className='minutes-container'>\n        <span className='minutes'>{props.minutes}</span> Minute{props.minutes === 1 ? '': 's'}, </span>\n      <span className='seconds-container'>\n        <span className='seconds'>{props.seconds}</span> Seconds </span>\n    </span>\n  return text\n}\n// Card Component\nfunction Card(props) {\n  let card = \n  <div className=\"card\">\n    <div className=\"card-container\">\n      <h2><b>{props.name}</b></h2>\n      <p>{ ReactHtmlParser(props.description) }</p>\n    </div>\n  </div>\n  return card\n}\n// Renderer for the countdown to ApoCareypse\nconst countdownRenderer = ({ days, hours, minutes, seconds, completed }) => {    \n  if (completed) {\n    // Renders the duration state of the ApoCareypse\n    return <Countdown date={new Date(year, 11, 25)} renderer={durationRenderer}/>;\n  } else {\n    // Render a countdown\n    return <span className='countdown-text'><b>The {year} ApoCareypse begins in: </b><br/> <Timer days={days} hours={hours} minutes={minutes} seconds={seconds}/> </span>;\n  }\n};\nconst durationRenderer = ({ days, hours, minutes, seconds, completed }) => {    \n  if (completed) {\n    // Render a completed state\n    return <Countdown date={new Date(year, 11, 1)} renderer={countdownRenderer} />;\n  } else {\n    // Render a countdown till the end\n    return <span className='countdown-text'><b>The ApoCareypse has begun! </b><br/> It will conclude in: <br/><Timer days={days} hours={hours} minutes={minutes} seconds={seconds}/></span>;\n  }\n};\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Snowfall snowflakeCount={400} style={{position: 'absolute'}}/>\n      <div className='social-icons-container'>\n        <SocialIcon url=\"https://github.com/dydestroyer1027/apocareypse\" bgColor=\"#5E81AC\" style={{ height: '4rem', width: '4rem' }} className='github-social-icon'/>\n      </div>\n        <div className='countdown'>\n          <div className=\"countdown-card\">\n            <div className=\"countdown-card-container\">\n              <Countdown date={new Date(year, 11, 1)} renderer={countdownRenderer}/>\n            </div>\n          </div>\n        </div>\n      <div className='information-container'>\n          <div className='information'> \n            <div className='cards'>\n              <Card name='Objective' description='Last as long as possible without listening to <a href=https://www.youtube.com/watch?v=aAkMkVFwAoo target=\"_blank\" rel=\"noopener noreferrer\">All I Want For Christmas Is You</a>' />\n              <Card name='Duration' description='The Game begins on the 1st of December, and concludes on December 25th. '/>  \n              <Card name='Rule 1' description='Only the original version of the song counts as losing, any remixes or covers are permitted.' />\n              <Card name='Rule 2' description='Attempting to remove others from the game by sending them a link to the song, or playing it near them is allowed, but discouraged.' />\n              <Card name='Losing' description='As soon as you recognize the song playing near you, you have lost the game.' />\n              <Card name='Additional Information' description='This version of the game was adapted from <a href=https://en.wikipedia.org/wiki/Whamageddon target=\"_blank\" rel=\"noopener noreferrer\">Whamageddon</a>.' />\n            </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}